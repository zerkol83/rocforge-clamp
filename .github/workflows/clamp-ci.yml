name: Clamp CI

on:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  resolve-image:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.bootstrap.outputs.image }}
      digest_status: ${{ steps.bootstrap.outputs.status }}
      snapshot_b64: ${{ steps.bootstrap.outputs.snapshot_b64 }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install resolver dependencies
        run: python3 -m pip install --user PyYAML requests

      - name: Validate ROCm cache
        run: |
          status="ok"
          if ls images/*.tar.gz >/dev/null 2>&1; then
            for archive in images/*.tar.gz; do
              echo "Validating $archive"
              if ! gzip -t "$archive"; then
                echo "::warning::gzip validation failed for $archive"
                status="warn"
                continue
              fi
              sha=$(sha256sum "$archive" | awk '{print $1}')
              echo "$archive sha256=$sha"
              if command -v docker >/dev/null 2>&1; then
                if docker load -i "$archive"; then
                  echo "Loaded image: $(basename "$archive")"
                else
                  echo "::warning::docker load failed for $archive"
                  status="warn"
                fi
              else
                echo "::warning::Docker unavailable; skipping load for $archive"
                status="warn"
              fi
            done
          else
            echo "::warning::No cached ROCm images found."
            status="warn"
          fi
          echo "cache_status=$status" >> "$GITHUB_OUTPUT"

      - name: Show cached CI mode
        run: python3 -m rocforge_ci mode show

      - name: Smart bootstrap
        id: bootstrap
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          python3 -m rocforge_ci smart-bootstrap || python3 -m rocforge_ci offline-bootstrap
          image=$(python3 -c 'import json; print(json.load(open("build/rocm_snapshot.json"))["image"])')
          echo "image=$image" >> "$GITHUB_OUTPUT"
          snapshot_b64=$(base64 -w0 build/rocm_snapshot.json)
          echo "snapshot_b64=$snapshot_b64" >> "$GITHUB_OUTPUT"
          status="ok"
          python3 -m rocforge_ci verify --auto "$image"
          rc=$?
          if [ $rc -eq 1 ]; then
            status="warn"
            echo "::warning::ROCm digest verification reported warnings"
          elif [ $rc -eq 2 ]; then
            status="fail"
            echo "::warning::ROCm digest verification failed"
          fi
          echo "status=$status" >> "$GITHUB_OUTPUT"
          if [ "$status" = "fail" ]; then
            exit 1
          fi

      - name: Reset CI mode marker
        if: always()
        run: python3 -m rocforge_ci mode reset

  rocm-build:
    needs: resolve-image
    if: needs.resolve-image.outputs.image != ''
    runs-on: ubuntu-latest
    strategy:
      matrix:
        config: [ default, parallel ]
    container:
      image: ${{ needs.resolve-image.outputs.image != '' && needs.resolve-image.outputs.image || 'ghcr.io/zerkol83/rocm-dev:6.4.4-ubuntu-20.04' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate ROCm cache
        run: |
          status="ok"
          if ls images/*.tar.gz >/dev/null 2>&1; then
            for archive in images/*.tar.gz; do
              echo "Validating $archive"
              if ! gzip -t "$archive"; then
                echo "::warning::gzip validation failed for $archive"
                status="warn"
                continue
              fi
              sha=$(sha256sum "$archive" | awk '{print $1}')
              echo "$archive sha256=$sha"
              if command -v docker >/dev/null 2>&1; then
                if docker load -i "$archive"; then
                  echo "Loaded image: $(basename "$archive")"
                else
                  echo "::warning::docker load failed for $archive"
                  status="warn"
                fi
              else
                echo "::warning::Docker unavailable; skipping load for $archive"
                status="warn"
              fi
            done
          else
            echo "::warning::No cached ROCm images found."
            status="warn"
          fi
          echo "cache_status=$status" >> "$GITHUB_OUTPUT"

      - name: Restore snapshot metadata
        run: |
          mkdir -p build
          printf '%s' "${{ needs.resolve-image.outputs.snapshot_b64 }}" | base64 -d > build/rocm_snapshot.json

      - name: Configure project
        run: |
          export PATH=/opt/rocm/bin:$PATH
          cmake -S . -B build -G Ninja -DCMAKE_PREFIX_PATH=/opt/rocm -DROCM_SNAPSHOT_JSON=build/rocm_snapshot.json

      - name: Build project
        run: |
          export PATH=/opt/rocm/bin:$PATH
          cmake --build build

      - name: Run CTest
        run: |
          export PATH=/opt/rocm/bin:$PATH
          if [ "${{ matrix.config }}" = "parallel" ]; then
            ctest --test-dir build --output-on-failure -j 4
          else
            ctest --test-dir build --output-on-failure
          fi

      - name: Configure Clamp
        run: |
          export PATH=/opt/rocm/bin:$PATH
          cmake -S clamp -B build -G Ninja -DCMAKE_PREFIX_PATH=/opt/rocm -DROCM_SNAPSHOT_JSON=build/rocm_snapshot.json

      - name: Build Clamp
        run: |
          export PATH=/opt/rocm/bin:$PATH
          cmake --build build

      - name: Run Clamp Tests
        run: |
          export PATH=/opt/rocm/bin:$PATH
          ctest --output-on-failure --test-dir build
          if [ -d build/telemetry ]; then
            echo "Telemetry detected — stability summary:"
            cat build/telemetry/*.json | jq '.stability_score'
          else
            echo "No telemetry data found — skipping stability summary."
          fi

      - name: Run Python tests
        run: |
          python3 -m unittest tests.cli.test_clamp_cli
          python3 -m unittest tests.clamp.test_clamp_extension
          python3 -m unittest tests.clamp.test_rocm_verifier
          python3 ci/tests/test_ci_mode.py

      - name: Reset CI mode marker
        if: always()
        run: python3 -m rocforge_ci mode reset

      - name: Archive Telemetry
        if: matrix.config == 'parallel' && always()
        uses: actions/upload-artifact@v4
        with:
          name: clamp-telemetry-${{ matrix.config }}
          path: build/telemetry
          if-no-files-found: ignore
