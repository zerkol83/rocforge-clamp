name: Clamp CI

on:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  resolve-image:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.resolve.outputs.image }}
      digest_status: ${{ steps.verify.outputs.status }}
      snapshot_b64: ${{ steps.resolve.outputs.snapshot_b64 }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install resolver dependencies
        run: |
          python3 -m pip install --user PyYAML requests

      - name: Show cached CI mode
        run: python3 -m rocforge_ci mode show

      - name: Smart bootstrap
        id: resolve
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          python3 -m rocforge_ci smart-bootstrap

          image=$(python3 -c 'import json,sys; print(json.load(open("build/rocm_snapshot.json")).get("image", ""))')
          echo "image=$image" >> "$GITHUB_OUTPUT"

          snapshot_b64=$(base64 -w0 build/rocm_snapshot.json)
          echo "snapshot_b64=$snapshot_b64" >> "$GITHUB_OUTPUT"

          status="ok"
          python3 -m rocforge_ci verify --auto "$image"
          rc=$?
          if [ $rc -eq 1 ]; then
            echo "::warning::ROCm digest drift detected (policy warn)."
            status="warn"
          elif [ $rc -eq 2 ]; then
            echo "status=fail" >> "$GITHUB_OUTPUT"
            echo "ROCm digest verification failed." >&2
            status="fail"
            exit 1
          fi
          echo "status=$status" >> "$GITHUB_OUTPUT"

      - name: Reset CI mode marker
        if: always()
        run: python3 -m rocforge_ci mode reset

  rocm-build:
    needs: resolve-image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        config: [default, parallel]
    container:
      image: ${{ needs.resolve-image.outputs.image }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache ROCm toolchain
        uses: actions/cache@v4
        with:
          path: /opt/rocm
          key: rocm-${{ runner.os }}-${{ hashFiles('ci/rocm_matrix.yml') }}

      - name: Install build dependencies
        run: |
          apt-get update
          apt-get install -y cmake ninja-build g++ python3 jq

      - name: Restore snapshot metadata
        run: |
          mkdir -p build
          printf '%s' "${{ needs.resolve-image.outputs.snapshot_b64 }}" | base64 -d > build/rocm_snapshot.json

      - name: Configure
        run: |
          export PATH=/opt/rocm/bin:$PATH
          cmake -S . -B build -G Ninja -DCMAKE_PREFIX_PATH=/opt/rocm -DROCM_SNAPSHOT_JSON=build/rocm_snapshot.json

      - name: Build
        run: |
          export PATH=/opt/rocm/bin:$PATH
          cmake --build build

      - name: Test
        run: |
          export PATH=/opt/rocm/bin:$PATH
          if [ "${{ matrix.config }}" = "parallel" ]; then
            ctest --test-dir build --output-on-failure -j 4
          else
            ctest --test-dir build --output-on-failure
          fi

      - name: Configure Clamp
        run: |
          export PATH=/opt/rocm/bin:$PATH
          cmake -S clamp -B build -G Ninja -DCMAKE_PREFIX_PATH=/opt/rocm -DROCM_SNAPSHOT_JSON=build/rocm_snapshot.json

      - name: Build Clamp
        run: |
          export PATH=/opt/rocm/bin:$PATH
          cmake --build build

      - name: Run Clamp Tests
        run: |
          export PATH=/opt/rocm/bin:$PATH
          ctest --output-on-failure --test-dir build
          if [ -d build/telemetry ]; then
            echo "Telemetry detected — stability summary:"
            cat build/telemetry/*.json | jq '.stability_score'
          else
            echo "No telemetry data found — skipping stability summary."
          fi

      - name: Archive Telemetry
        if: matrix.config == 'parallel' && always()
        uses: actions/upload-artifact@v4
        with:
          name: clamp-telemetry-${{ matrix.config }}
          path: build/telemetry
          if-no-files-found: ignore
